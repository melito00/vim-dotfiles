let mapleader = "\<Space>"
" let mapleader = ","

lang en_US.UTF-8

" ------------------------------------------------------------------------------
" Options
" {{{
set fileformats=unix,dos,mac
set encoding=utf-8
set fileencoding=utf-8
scriptencoding=utf-8
"set fileencodings=euc-jp,cp932,iso-2022-jp
"set fileencodings=iso-2022-jp,euc-jp,cp932
set fileencodings=iso-2022-jp,utf-8,euc-jp,cp932

set ambiwidth=double
set nobackup
set belloff=all
set backspace=""
set cursorline
set expandtab
set foldlevel=1
set nofoldenable
set foldmethod=indent
set hlsearch
set noincsearch
set laststatus=2
set modeline
set modelines=5
set ruler
set showcmd
set noshowmode
set shiftwidth=2
set noshowmatch
set softtabstop=2
set tabstop=2
set noundofile

set directory=$HOME/.vim/tmp
set wildmode=longest:full
set wildmenu
set iminsert=0
set imsearch=0

set mouse-=a " Disable automatic visual mode using mouse

"set statusline=%<%F\ %y%{'['.(&fenc!=''?&fenc:&enc).'\|'.&ff.']'}\ \ %l/%L\ (%P)%m%=%{strftime(\"%Y/%m/%d\ %H:%M\")}

"}}}

" ------------------------------------------------------------------------------
" For dein
" {{{
let s:cache_home = expand('~/.cache')
let s:dein_dir = s:cache_home . '/dein'
let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'

if &compatible
  set nocompatible " Be iMproved
endif

" Required:
" Add the dein installation directory into runtimepath
execute 'set runtimepath^=' . s:dein_repo_dir
"set runtimepath+=s:dein_repo_dir

"let g:dein#install_github_api_token = 'your token'

" Required:
if dein#load_state(s:dein_dir)
  call dein#begin(s:dein_dir)

  " Let dein manage dein
  call dein#add(s:dein_repo_dir)

  " LSP
  " call dein#add('neovim/nvim-lspconfig')

  " Deno
  call dein#add('vim-denops/denops.vim')

  call dein#add('Shougo/ddc.vim')
  call dein#add('Shougo/ddc-around')
  call dein#add('Shougo/ddc-matcher_head')
  call dein#add('Shougo/ddc-sorter_rank')

  " Required:
  call dein#end()
  call dein#save_state()
endif

" Required:
filetype plugin indent on
syntax enable

" If you want to install not installed plugins on startup.
if dein#check_install()
 call dein#install()
endif
command! DeinInstall call dein#install()
command! DeinUpdate call dein#check_update(v:true)
"}}}

set background=dark

call ddc#custom#patch_global('sources', ['around'])
call ddc#custom#patch_global('sourceOptions', {
  \ '_': {
  \   'minAutoCompletionLength': 1,
  \   'maxCandidates': 10,
  \   'matchers': ['matcher_head'],
  \   'sorters': ['sorter_rank']
  \ }
  \ })

inoremap <silent><expr> <TAB>
\ pumvisible() ? '<C-n>' :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 1] =~# '\s') ?
\ '<TAB>' : ddc#map#manual_complete()

inoremap <expr><S-TAB> pumvisible() ? '<C-p>' : '<C-h>'

call ddc#enable()

" vim: ft=vim foldmethod=marker:
